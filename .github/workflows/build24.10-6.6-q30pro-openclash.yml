#
# https://github.com/P3TERX/Actions-OpenWrt
#
# File: .github/workflows/openwrt-bulder.yml
# Description: Build OpenWrt using GitHub Actions
#
# Copyright (c) 2019-2024 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#

name: Build immortalwrt24.10-6.6 JCG Q30Pro Latest Passwall

on:
  repository_dispatch:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/padavanonly/immortalwrt-mt798x-24.10
  REPO_BRANCH: openwrt-24.10-6.6
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: 2410-6.6-q30pro-passwall.config
  DIY_P1_SH: 2410-diy-part1-pw.sh
  DIY_P2_SH: 2410-6.6-diy-part2-6-1-pw.sh
  RELEASE_FILE: 2410-6.6-pw-release.txt  
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache clang cmake cpio curl device-tree-compiler ecj fastjar flex gawk gettext gcc-multilib g++-multilib git gnutls-dev gperf haveged help2man intltool lib32gcc-s1 libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses-dev libpython3-dev libreadline-dev libssl-dev libtool libyaml-dev libz-dev lld llvm lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python3 python3-pip python3-ply python3-docutils python3-pyelftools qemu-utils re2c rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev zstd
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Setup ccache
      uses: actions/cache@v4
      with:
        path: ~/.ccache
        key: ccache-${{ runner.os }}-${{ env.REPO_BRANCH }}-${{ hashFiles(env.CONFIG_FILE) }}
        restore-keys: |
          ccache-${{ runner.os }}-${{ env.REPO_BRANCH }}-
        enableCrossOsArchive: true

    - name: Enable ccache
      run: |
        echo "USE_CCACHE=1" >> $GITHUB_ENV
        echo "CCACHE_DIR=~/.ccache" >> $GITHUB_ENV
        ccache -M 10G
        ccache -z

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Restore DL cache
      uses: actions/cache@v4
      with:
        path: openwrt/dl
        key: dl-${{ runner.os }}-${{ env.REPO_BRANCH }}-${{ hashFiles(env.CONFIG_FILE) }}
        restore-keys: |
          dl-${{ runner.os }}-${{ env.REPO_BRANCH }}-
        enableCrossOsArchive: true

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds
      run: |
         cd openwrt
         ./scripts/feeds update -a
         rm -rf feeds/packages/lang/golang
         git clone https://github.com/kenzok8/golang feeds/packages/lang/golang

    - name: Install feeds
      run: |
        cd openwrt
        ./scripts/feeds install -a 
        
    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config

        # Download and apply the custom filogic.mk for JCG Q30 Pro factory support
        echo "Downloading custom filogic.mk for JCG Q30 Pro factory support..."
        wget -q https://raw.githubusercontent.com/huniangitb/ideal-pancake/refs/heads/main/filogic.mk -O openwrt/target/linux/mediatek/image/filogic.mk
        
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    # 新增：编译步骤
    - name: Download all packages
      run: |
        cd openwrt
        make defconfig
        make download -j$(nproc)

    - name: Build firmware
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) V=s

    # 编译完成后，通常会有上传固件和清理旧 Release 的步骤
    # 以下为示例，请根据您的实际需求调整
    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        RELEASE_NAME=$(date +"%Y.%m.%d-%H%M")
        echo "STATUS=success" >> $GITHUB_OUTPUT
        echo "RELEASE_NAME=$RELEASE_NAME" >> $GITHUB_OUTPUT
        echo "FIRMWARE_DIR=$PWD" >> $GITHUB_ENV

    - name: Upload firmware directory
      uses: actions/upload-artifact@v4
      if: steps.organize.outputs.STATUS == 'success' && env.UPLOAD_BIN_DIR == 'true' && !cancelled()
      with:
        name: OpenWrt_firmware-${{ steps.organize.outputs.RELEASE_NAME }}
        path: openwrt/bin/targets/

    - name: Upload firmware to Release
      uses: softprops/action-gh-release@v1
      if: steps.organize.outputs.STATUS == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        tag_name: ${{ steps.organize.outputs.RELEASE_NAME }}
        body: |
          Build immortalwrt24.10-6.6 JCG Q30Pro Latest Passwall
          Build time: ${{ steps.organize.outputs.RELEASE_NAME }}
        files: openwrt/bin/targets/*/*/*

    # 修正后的 Delete old releases 步骤
    - name: Delete old releases
      uses: Nats-ji/delete-old-releases@v1.0.1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        keep-count: 5 # 保留最新的 5 个 release
        # remove-tags: true # 如果需要同时删除关联的标签，请取消注释此行
